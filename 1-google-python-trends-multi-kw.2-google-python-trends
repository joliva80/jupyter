{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Python Google Trends API\n",
    "\n",
    "* https://towardsdatascience.com/google-trends-api-for-python-a84bc25db88f\n",
    "* https://pypi.org/project/pytrends/\n",
    "* https://github.com/GeneralMills/pytrends#installation\n",
    "* https://www.honchosearch.com/blog/seo/how-to-use-python-pytrends-to-automate-google-trends-data/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 259,
   "metadata": {},
   "outputs": [],
   "source": [
    "#!python3.8 -m pip install pytrends\n",
    "#!python3.8 -m pip install plotly\n",
    "#!python3.8 -m pip install pycountry"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''\n",
    "imports\n",
    "'''\n",
    "# Linear Regression\n",
    "import pandas as pd   \n",
    "from pytrends.request import TrendReq\n",
    "import matplotlib.pyplot as plt\n",
    "import plotly.graph_objects as go\n",
    "import pandas as pd\n",
    "import scipy.signal\n",
    "import numpy as np\n",
    "from sklearn import linear_model\n",
    "\n",
    "# Logistic Regression (Churn classification)\n",
    "from scipy.signal import find_peaks\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn import preprocessing\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import jaccard_score\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "from sklearn.metrics import log_loss\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Environment Variables and Authentication"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''\n",
    "GLOBAL ENVIRONMENT GOOGLE TREND VARIABLES\n",
    "'''\n",
    "# Get Dataframe with desired keyoword trend search\n",
    "pytrend = TrendReq()\n",
    "kw_list=['ahorro corriente', 'ahorro energia', 'energia solar', 'placas solares', 'energia fotovoltaica', 'energia solar fotovoltaica', 'placa energia solar']\n",
    "directory = \"/Users/joan/Workspace/python/py-trends-api/\"\n",
    "timeframe = 'all' # 'today 5-y'\n",
    "geo_location='ES' # specific country location Espa√±a\n",
    "year_start = 2021\n",
    "year_end = 2021\n",
    "month_start = 6\n",
    "month_end = 6\n",
    "day_start = 1\n",
    "day_end = 7\n",
    "hour_start = 0\n",
    "hour_end = 23"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Functions definition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''\n",
    " Get Google trends over time, all history by year, month and day\n",
    "'''\n",
    "def gtrends_overtime(kw_list, save_name=\"\", directory=\"\", category=0, time='all', loc=''):\n",
    "  \n",
    "    #iterate every 4 item in list plus a keyword reference as the relative comparison\n",
    "    i = 0\n",
    "    n_files = 0\n",
    "    print(\"Start getting google trends over time file num: \")\n",
    "    while i < len(kw_list):\n",
    "        l = kw_list[i:(i+4)]\n",
    "        \n",
    "        pytrend.build_payload(l, cat=category, timeframe=time, geo=loc, gprop='')\n",
    "        df_time = pytrend.interest_over_time()\n",
    "        \n",
    "        #df_time.reset_index(inplace=True) # convert date index into date column\n",
    "        df_time_name = str(save_name)+str((i+4)//4)+\".csv\"\n",
    "        df_time.to_csv(directory+df_time_name, index = False)\n",
    "        i += 4\n",
    "        n_files += 1\n",
    "        print(df_time_name)\n",
    "        \n",
    "    return n_files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''\n",
    " Get Google trends historical Interest by year, month, day and hour\n",
    "'''\n",
    "def gtrends_historical(kw_list, year_start=0, month_start=0, day_start=0, hour_start=0, \n",
    "                       year_end=0, month_end=0, day_end=0, hour_end=0, \n",
    "                       save_name=\"\", directory=\"\", category=0, geo_location='ES'):\n",
    "  \n",
    "    #iterate every 3 item in list\n",
    "    i = 0\n",
    "    n_files = 0\n",
    "    print(\"Start getting google trends over time file num: \")\n",
    "    while i < len(kw_list):\n",
    "        l = kw_list[i:(i+3)]\n",
    "        df_time = pytrend.get_historical_interest(l, year_start=year_start, month_start=month_start, \n",
    "                                                  day_start=day_start, hour_start=hour_start, \n",
    "                                                  year_end=year_end, month_end=month_end, day_end=day_end, \n",
    "                                                  hour_end=hour_end, cat=category, geo=geo_location, \n",
    "                                                  gprop='', sleep=0)\n",
    "            \n",
    "        df_time.reset_index(inplace=True) # convert date index into date column\n",
    "        df_time_name = str(save_name)+str((i+3)//3)+\".csv\"\n",
    "        df_time.to_csv(directory+df_time_name, index = False)\n",
    "        i += 3\n",
    "        n_files += 1\n",
    "        print(df_time_name)\n",
    "        \n",
    "    return n_files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "def combine_wbase(directory, base_name, n_files, out_filename):\n",
    "    \n",
    "    print(\"Merging CSV \" + str(n_files) + \" files: \")\n",
    "    first_file_name = directory+base_name+str(1)+\".csv\"\n",
    "    df1 = pd.read_csv(first_file_name)\n",
    "    print(first_file_name)\n",
    "    \n",
    "    for i in range(n_files-1):\n",
    "        filename = directory+base_name+str(i+2)+\".csv\"\n",
    "        df2 = pd.read_csv(filename)\n",
    "        df1 = pd.concat([df1, df2], axis=1, sort=False)\n",
    "        print(filename)\n",
    "        \n",
    "    # Drop duplicated columns\n",
    "    print(\"Dropping duplicated columns...\")\n",
    "    df1 = df1.loc[:,~df1.columns.duplicated()] # date and isPartial\n",
    "    \n",
    "    # Saving the merged file or you can simply return the dataframe\n",
    "    print(\"Saving file to: \" + directory+out_filename)\n",
    "    df1.to_csv(directory+out_filename, index = False)\n",
    "    \n",
    "    \n",
    "    return df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Tidy up IsPartial column for data overtime, eliminates the rows with isPartial == true\n",
    "# and then drop the column isPartial, when all values are false\n",
    "def isPartialTidyUp(df, n_file):\n",
    "    for i in range(n_file-1):\n",
    "        df = df.drop(columns=\"isPartial.\"+str(i+1)+\"\")\n",
    "    if df.isPartial.tail(1).bool() == True:\n",
    "        df = df.drop(df.isPartial.tail(1).index, axis=0)\n",
    "    df = df.drop(columns=\"isPartial\")\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Searching for Trends"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Start getting google trends over time file num: \n",
      "gtrends_overtime_MULTIKEYWORD-15-6_1.csv\n",
      "gtrends_overtime_MULTIKEYWORD-15-6_2.csv\n",
      "gtrends_overtime_MULTIKEYWORD-15-6_3.csv\n",
      "Merging CSV 3 files: \n",
      "/Users/joan/Workspace/python/py-trends-api/gtrends_overtime_MULTIKEYWORD-15-6_1.csv\n",
      "/Users/joan/Workspace/python/py-trends-api/gtrends_overtime_MULTIKEYWORD-15-6_2.csv\n",
      "/Users/joan/Workspace/python/py-trends-api/gtrends_overtime_MULTIKEYWORD-15-6_3.csv\n",
      "Dropping duplicated columns...\n",
      "Saving file to: /Users/joan/Workspace/python/py-trends-api/gtrends_overtime_MULTIKEYWORD-15-6_COMBINED.csv\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>ahorro corriente</th>\n",
       "      <th>ahorro energia</th>\n",
       "      <th>energia solar</th>\n",
       "      <th>isPartial</th>\n",
       "      <th>placas solares</th>\n",
       "      <th>energia fotovoltaica</th>\n",
       "      <th>energia solar fotovoltaica</th>\n",
       "      <th>placa energia solar</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-06-01 00:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>20</td>\n",
       "      <td>False</td>\n",
       "      <td>37</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021-06-01 01:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>False</td>\n",
       "      <td>38</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021-06-01 02:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>70</td>\n",
       "      <td>False</td>\n",
       "      <td>33</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021-06-01 03:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>False</td>\n",
       "      <td>47</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2021-06-01 04:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>54</td>\n",
       "      <td>False</td>\n",
       "      <td>59</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>163</th>\n",
       "      <td>2021-06-07 19:00:00</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>36</td>\n",
       "      <td>False</td>\n",
       "      <td>53</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>164</th>\n",
       "      <td>2021-06-07 20:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>36</td>\n",
       "      <td>False</td>\n",
       "      <td>57</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>165</th>\n",
       "      <td>2021-06-07 21:00:00</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>38</td>\n",
       "      <td>False</td>\n",
       "      <td>50</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>166</th>\n",
       "      <td>2021-06-07 22:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>43</td>\n",
       "      <td>False</td>\n",
       "      <td>41</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>167</th>\n",
       "      <td>2021-06-07 23:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>13</td>\n",
       "      <td>False</td>\n",
       "      <td>37</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>168 rows √ó 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                    date  ahorro corriente  ahorro energia  energia solar  \\\n",
       "0    2021-06-01 00:00:00                 0              13             20   \n",
       "1    2021-06-01 01:00:00                 0               0             12   \n",
       "2    2021-06-01 02:00:00                 0              14             70   \n",
       "3    2021-06-01 03:00:00                 0               0             50   \n",
       "4    2021-06-01 04:00:00                 0               0             54   \n",
       "..                   ...               ...             ...            ...   \n",
       "163  2021-06-07 19:00:00                 1               6             36   \n",
       "164  2021-06-07 20:00:00                 0               5             36   \n",
       "165  2021-06-07 21:00:00                 2               6             38   \n",
       "166  2021-06-07 22:00:00                 0               8             43   \n",
       "167  2021-06-07 23:00:00                 0               3             13   \n",
       "\n",
       "     isPartial  placas solares  energia fotovoltaica  \\\n",
       "0        False              37                     0   \n",
       "1        False              38                     0   \n",
       "2        False              33                     4   \n",
       "3        False              47                     3   \n",
       "4        False              59                     4   \n",
       "..         ...             ...                   ...   \n",
       "163      False              53                     3   \n",
       "164      False              57                     3   \n",
       "165      False              50                     2   \n",
       "166      False              41                     2   \n",
       "167      False              37                     2   \n",
       "\n",
       "     energia solar fotovoltaica  placa energia solar  \n",
       "0                             0                    0  \n",
       "1                             0                    0  \n",
       "2                             4                    0  \n",
       "3                             3                    0  \n",
       "4                             4                    0  \n",
       "..                          ...                  ...  \n",
       "163                           1                    0  \n",
       "164                           2                   22  \n",
       "165                           1                   17  \n",
       "166                           1                   42  \n",
       "167                           0                    0  \n",
       "\n",
       "[168 rows x 9 columns]"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "Test keyword list and store into CSV, month by month to get hourly to avoid timeouts\n",
    "'''\n",
    "# single call\n",
    "#df = pytrend.get_historical_interest(kw_list[0:2], year_start=year_start, month_start=month_start, \n",
    "#                                    day_start=day_start, hour_start=hour_start, year_end=year_end, \n",
    "#                                    month_end=month_end, day_end=day_end, hour_end=hour_end, cat=0, geo=geo_location, gprop='', sleep=0)\n",
    "\n",
    "# multi calls for multikeyword\n",
    "#n_files = gtrends_overtime(kw_list, \"gtrends_overtime_MULTIKEYWORD-14-6_\", directory, category=71, time='all', loc='ES')\n",
    "n_files = gtrends_historical(kw_list, year_start=year_start, month_start=month_start, day_start=day_start, \n",
    "                             hour_start=hour_start, year_end=year_end, month_end=month_end, day_end=day_end, \n",
    "                             hour_end=hour_end, save_name=\"gtrends_overtime_MULTIKEYWORD-15-6_\", \n",
    "                             directory=directory, category=0, geo_location=geo_location)\n",
    "\n",
    "# combine multikeyword files\n",
    "df = combine_wbase(directory, \"gtrends_overtime_MULTIKEYWORD-15-6_\", n_files, \"gtrends_overtime_MULTIKEYWORD-15-6_COMBINED.csv\")\n",
    "\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Processing Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>ahorro corriente</th>\n",
       "      <th>ahorro energia</th>\n",
       "      <th>energia solar</th>\n",
       "      <th>placas solares</th>\n",
       "      <th>energia fotovoltaica</th>\n",
       "      <th>energia solar fotovoltaica</th>\n",
       "      <th>placa energia solar</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>day</th>\n",
       "      <th>hour</th>\n",
       "      <th>geo_location</th>\n",
       "      <th>min_interest</th>\n",
       "      <th>max_interest</th>\n",
       "      <th>avg_interest</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-06-01 00:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>20</td>\n",
       "      <td>37</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>37</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021-06-01 01:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>38</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>38</td>\n",
       "      <td>7.142857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021-06-01 02:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>70</td>\n",
       "      <td>33</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>70</td>\n",
       "      <td>17.857143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021-06-01 03:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>47</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>14.714286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2021-06-01 04:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>54</td>\n",
       "      <td>59</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>59</td>\n",
       "      <td>17.285714</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 date  ahorro corriente  ahorro energia  energia solar  \\\n",
       "0 2021-06-01 00:00:00                 0              13             20   \n",
       "1 2021-06-01 01:00:00                 0               0             12   \n",
       "2 2021-06-01 02:00:00                 0              14             70   \n",
       "3 2021-06-01 03:00:00                 0               0             50   \n",
       "4 2021-06-01 04:00:00                 0               0             54   \n",
       "\n",
       "   placas solares  energia fotovoltaica  energia solar fotovoltaica  \\\n",
       "0              37                     0                           0   \n",
       "1              38                     0                           0   \n",
       "2              33                     4                           4   \n",
       "3              47                     3                           3   \n",
       "4              59                     4                           4   \n",
       "\n",
       "   placa energia solar  year  month  day  hour geo_location  min_interest  \\\n",
       "0                    0  2021      6    1     0           ES             0   \n",
       "1                    0  2021      6    1     1           ES             0   \n",
       "2                    0  2021      6    1     2           ES             0   \n",
       "3                    0  2021      6    1     3           ES             0   \n",
       "4                    0  2021      6    1     4           ES             0   \n",
       "\n",
       "   max_interest  avg_interest  \n",
       "0            37     10.000000  \n",
       "1            38      7.142857  \n",
       "2            70     17.857143  \n",
       "3            50     14.714286  \n",
       "4            59     17.285714  "
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Convert date index to new column date\n",
    "#df.reset_index(inplace=True) # already done in multi keyword function\n",
    "\n",
    "# Tidy up isPartial data (estimated)\n",
    "df = isPartialTidyUp(df,1)\n",
    "\n",
    "# Drop duplicated columns\n",
    "#print(\"Dropping duplicated columns...\")\n",
    "#df = df.loc[:,~df.columns.duplicated()] # date and isPartial\n",
    "\n",
    "# Cast date object column into datetime column\n",
    "df['date'] = pd.to_datetime(df['date'], format='%Y-%m-%dT%H:%M:%S')\n",
    "\n",
    "# Split date into year, month, day and hour\n",
    "df['year'], df['month'], df['day'], df['hour'] = df['date'].apply(lambda x: x.year), df['date'].apply(lambda x: x.month), df['date'].apply(lambda x: x.day), df['date'].apply(lambda x: x.hour)\n",
    "\n",
    "# Drop date column\n",
    "#df = df.drop(columns=\"date\") # will be needed for predictions, it is better to filter in a new dataframe\n",
    "\n",
    "# Interest statistics\n",
    "#df['googleInterest'] = df[kw_list[0]]\n",
    "\n",
    "# Transpose column name with keywords kw_list[i] into a column value within a new column named 'keyword'\n",
    "#df['keyword'] = kw_list[0]\n",
    "#df = df.drop(columns=kw_list[0])\n",
    "\n",
    "# Add location column\n",
    "df['geo_location'] = geo_location # geo_location translated to spanish description from ISO2 ES code\n",
    "\n",
    "# Calculate the min interest\n",
    "df['min_interest'] = df[df.columns[1:(len(kw_list)+1)]].min(axis=1) # Horitzontal min for the keyword columns\n",
    "\n",
    "# Calculate the max interest\n",
    "df['max_interest'] = df[df.columns[1:(len(kw_list)+1)]].max(axis=1) # Horitzontal max for the keyword columns\n",
    "\n",
    "# Calculate the average interest\n",
    "df['avg_interest'] = df[df.columns[1:(len(kw_list)+1)]].mean(axis=1) # Horitzontal mean for the keyword columns\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['date', 'ahorro corriente', 'ahorro energia', 'energia solar',\n",
       "       'placas solares', 'energia fotovoltaica', 'energia solar fotovoltaica',\n",
       "       'placa energia solar', 'year', 'month', 'day', 'hour', 'geo_location',\n",
       "       'min_interest', 'max_interest', 'avg_interest'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 16 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'\\nwe can drop -ahorro energia- and -ahorro corriente- from de model as they are not relevant\\n'"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# data visualization \n",
    "\n",
    "viz = df[['date', 'ahorro corriente', 'ahorro energia', 'energia solar',\n",
    "       'placas solares', 'energia fotovoltaica', 'energia solar fotovoltaica',\n",
    "       'placa energia solar', 'year', 'month', 'day', 'hour', 'geo_location',\n",
    "       'min_interest', 'max_interest', 'avg_interest']] #['ahorro consumo energetico','ahorro corriente','ahorro energia','energia solar', 'placas solares','max_interest','year','month','day','hour', 'avg_interest']]\n",
    "viz.hist()\n",
    "plt.show()\n",
    "\n",
    "'''\n",
    "we can drop, without relation:\n",
    "- ahorro energia\n",
    "- ahorro corriente\n",
    "- placa energia solar\n",
    "- min_interest\n",
    "- year\n",
    "- month\n",
    "- day (non lineal correlation)\n",
    "- hour (non lineal correlation)\n",
    "\n",
    "we will keep, lineal relation:\n",
    "- energia solar\n",
    "- placas solares\n",
    "- energia fotovoltaica\n",
    "- energia solar fotovoltaica\n",
    "- max_interest\n",
    "\n",
    "non lineal relations\n",
    "- day (non lineal correlation)\n",
    "- hour (non lineal correlation)\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# relationship vars \n",
    "\n",
    "plt.scatter(df['hour'], df.avg_interest,  color='blue')\n",
    "plt.xlabel(\"Avg \")\n",
    "plt.ylabel(\"max\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Test and Train dataset\n",
    "\n",
    "msk = np.random.rand(len(df)) < 0.3\n",
    "train = df[msk]\n",
    "test = df[~msk]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Coefficients:  [[0.12952817 0.01178586 0.33412488 0.14888505 0.16734116]]\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "x and y must be the same size",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-87-1795bf00f1fc>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0mprint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'Coefficients: '\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mregr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcoef_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'energia solar'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'placas solares'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'energia fotovoltaica'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'energia solar fotovoltaica'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'max_interest'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mavg_interest\u001b[0m\u001b[0;34m,\u001b[0m  \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'blue'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mregr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcoef_\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mx\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mregr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mintercept_\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'-r'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Keywords\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mscatter\u001b[0;34m(x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, verts, edgecolors, plotnonfinite, data, **kwargs)\u001b[0m\n\u001b[1;32m   2834\u001b[0m         \u001b[0mvmin\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvmax\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlinewidths\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverts\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2835\u001b[0m         edgecolors=None, *, plotnonfinite=False, data=None, **kwargs):\n\u001b[0;32m-> 2836\u001b[0;31m     __ret = gca().scatter(\n\u001b[0m\u001b[1;32m   2837\u001b[0m         \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmarker\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmarker\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcmap\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcmap\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnorm\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnorm\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2838\u001b[0m         \u001b[0mvmin\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvmin\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvmax\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvmax\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0malpha\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlinewidths\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlinewidths\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/matplotlib/__init__.py\u001b[0m in \u001b[0;36minner\u001b[0;34m(ax, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1587\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0minner\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1588\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1589\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msanitize_sequence\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1590\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1591\u001b[0m         \u001b[0mbound\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnew_sig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36mscatter\u001b[0;34m(self, x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, verts, edgecolors, plotnonfinite, **kwargs)\u001b[0m\n\u001b[1;32m   4434\u001b[0m         \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mravel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4435\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4436\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"x and y must be the same size\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4437\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4438\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0ms\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: x and y must be the same size"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# LINEAR REGRESSION\n",
    "#from sklearn import linear_model\n",
    "\n",
    "# model train and fit parameters\n",
    "regr = linear_model.LinearRegression()\n",
    "x = np.asanyarray(train[['energia solar','placas solares','energia fotovoltaica','energia solar fotovoltaica','max_interest']]) \n",
    "y = np.asanyarray(train[['avg_interest']])\n",
    "regr.fit (x, y)\n",
    "\n",
    "# The coefficients\n",
    "print ('Coefficients: ', regr.coef_)\n",
    "\n",
    "plt.scatter(train[['energia solar','placas solares','energia fotovoltaica','energia solar fotovoltaica','max_interest']], train.avg_interest,  color='blue')\n",
    "plt.plot(x, regr.coef_[0][0]*x + regr.intercept_[0], '-r')\n",
    "plt.xlabel(\"Keywords\")\n",
    "plt.ylabel(\"avg_interest\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean absolute error: 1.62\n",
      "Residual sum of squares (MSE): 4.89\n",
      "R2-score: 0.77\n"
     ]
    }
   ],
   "source": [
    "# Accuracy error\n",
    "from sklearn.metrics import r2_score\n",
    "\n",
    "test_x = np.asanyarray(test[['energia solar','placas solares','energia fotovoltaica','energia solar fotovoltaica','max_interest']])\n",
    "test_y = np.asanyarray(test[['avg_interest']])\n",
    "test_y_ = regr.predict(test_x)\n",
    "\n",
    "print(\"Mean absolute error: %.2f\" % np.mean(np.absolute(test_y_ - test_y)))\n",
    "print(\"Residual sum of squares (MSE): %.2f\" % np.mean((test_y_ - test_y) ** 2))\n",
    "print(\"R2-score: %.2f\" % r2_score(test_y , test_y_) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Coefficients:  [[0.12952817 0.01178586 0.33412488 0.14888505 0.16734116]]\n"
     ]
    }
   ],
   "source": [
    "# Regression MULTI\n",
    "#from sklearn import linear_model\n",
    "\n",
    "regr = linear_model.LinearRegression()\n",
    "x = np.asanyarray(train[['energia solar','placas solares','energia fotovoltaica','energia solar fotovoltaica','max_interest']])\n",
    "y = np.asanyarray(train[['avg_interest']])\n",
    "regr.fit (x, y)\n",
    "\n",
    "# The coefficients\n",
    "print ('Coefficients: ', regr.coef_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Residual sum of squares: 4.89\n",
      "Variance score: 0.77\n",
      "Mean absolute error: 1.62\n",
      "Residual sum of squares (MSE): 4.89\n",
      "R2-score: 0.77\n"
     ]
    }
   ],
   "source": [
    "# Regression MULTI\n",
    "\n",
    "y_hat= regr.predict(test[['energia solar','placas solares','energia fotovoltaica','energia solar fotovoltaica','max_interest']])\n",
    "x = np.asanyarray(test[['energia solar','placas solares','energia fotovoltaica','energia solar fotovoltaica','max_interest']])\n",
    "y = np.asanyarray(test[['avg_interest']])\n",
    "print(\"Residual sum of squares: %.2f\"  % np.mean((y_hat - y) ** 2))\n",
    "\n",
    "# Explained variance score: 1 is perfect prediction\n",
    "print('Variance score: %.2f' % regr.score(x, y))\n",
    "\n",
    "print(\"Mean absolute error: %.2f\" % np.mean(np.absolute(y_hat - test_y)))\n",
    "print(\"Residual sum of squares (MSE): %.2f\" % np.mean((y_hat - test_y) ** 2))\n",
    "print(\"R2-score: %.2f\" % r2_score(test_y , y_hat) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['ES']\n"
     ]
    }
   ],
   "source": [
    "'''\n",
    "Country code map test\n",
    "'''\n",
    "\n",
    "import pycountry\n",
    "\n",
    "input_countries = ['Spain']\n",
    "\n",
    "# Load countries dict\n",
    "countries = {}\n",
    "for country in pycountry.countries:\n",
    "    countries[country.name] = country.alpha_2\n",
    "\n",
    "#print(countries)\n",
    "codes = [countries.get(country, 'Unknown code') for country in input_countries]\n",
    "\n",
    "print(codes)  # prints ['AS', 'CA', 'FR']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save Dataset into CSV file\n",
    "df.to_csv(directory + 'df_google_historical_interest_'+geo_location+'.csv', index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: '/Users/joan/Workspace/python/py-trends-api/df_google_historical_interest_ES.csv'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-40-51e88f45f9d7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Load Dataset from CSV file\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdirectory\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m'df_google_historical_interest_'\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mgeo_location\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m'.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, dialect, error_bad_lines, warn_bad_lines, delim_whitespace, low_memory, memory_map, float_precision)\u001b[0m\n\u001b[1;32m    684\u001b[0m     )\n\u001b[1;32m    685\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 686\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    687\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    688\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    450\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    451\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 452\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfp_or_buf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    453\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    454\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m    944\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    945\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 946\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    947\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    948\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, engine)\u001b[0m\n\u001b[1;32m   1176\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mengine\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"c\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1177\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"c\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1178\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCParserWrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1179\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1180\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"python\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, src, **kwds)\u001b[0m\n\u001b[1;32m   2006\u001b[0m         \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"usecols\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0musecols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2007\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2008\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparsers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTextReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2009\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2010\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader.__cinit__\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader._setup_parser_source\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/Users/joan/Workspace/python/py-trends-api/df_google_historical_interest_ES.csv'"
     ]
    }
   ],
   "source": [
    "# Load Dataset from CSV file\n",
    "df = pd.read_csv(directory + 'df_google_historical_interest_'+geo_location+'.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>ahorro corriente</th>\n",
       "      <th>ahorro energia</th>\n",
       "      <th>energia solar</th>\n",
       "      <th>placas solares</th>\n",
       "      <th>energia fotovoltaica</th>\n",
       "      <th>energia solar fotovoltaica</th>\n",
       "      <th>placa energia solar</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>day</th>\n",
       "      <th>hour</th>\n",
       "      <th>geo_location</th>\n",
       "      <th>min_interest</th>\n",
       "      <th>max_interest</th>\n",
       "      <th>avg_interest</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-06-01 00:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>20</td>\n",
       "      <td>37</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>37</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021-06-01 01:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>38</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>38</td>\n",
       "      <td>7.142857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021-06-01 02:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>70</td>\n",
       "      <td>33</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>70</td>\n",
       "      <td>17.857143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021-06-01 03:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>47</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>14.714286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2021-06-01 04:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>54</td>\n",
       "      <td>59</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>59</td>\n",
       "      <td>17.285714</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 date  ahorro corriente  ahorro energia  energia solar  \\\n",
       "0 2021-06-01 00:00:00                 0              13             20   \n",
       "1 2021-06-01 01:00:00                 0               0             12   \n",
       "2 2021-06-01 02:00:00                 0              14             70   \n",
       "3 2021-06-01 03:00:00                 0               0             50   \n",
       "4 2021-06-01 04:00:00                 0               0             54   \n",
       "\n",
       "   placas solares  energia fotovoltaica  energia solar fotovoltaica  \\\n",
       "0              37                     0                           0   \n",
       "1              38                     0                           0   \n",
       "2              33                     4                           4   \n",
       "3              47                     3                           3   \n",
       "4              59                     4                           4   \n",
       "\n",
       "   placa energia solar  year  month  day  hour geo_location  min_interest  \\\n",
       "0                    0  2021      6    1     0           ES             0   \n",
       "1                    0  2021      6    1     1           ES             0   \n",
       "2                    0  2021      6    1     2           ES             0   \n",
       "3                    0  2021      6    1     3           ES             0   \n",
       "4                    0  2021      6    1     4           ES             0   \n",
       "\n",
       "   max_interest  avg_interest  \n",
       "0            37     10.000000  \n",
       "1            38      7.142857  \n",
       "2            70     17.857143  \n",
       "3            50     14.714286  \n",
       "4            59     17.285714  "
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO --> add isTrendPeak column with the top peaks market over threashold of 25%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Peaks are: [  9  12  15  23  25  27  31  40  50  52  56  59  63  67  76  79  82  89\n",
      "  93  97 102 107 112 127 132 136 144 147 151 161 166]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Peaks detection\n",
    "\n",
    "x = np.array(df['avg_interest'])\n",
    "#peaks, _ = find_peaks(x, distance=20)\n",
    "peaks2, _ = find_peaks(x, prominence=4)      \n",
    "peaks3, _ = find_peaks(x, width=2)\n",
    "#peaks4, _ = find_peaks(x, threshold=2)  \n",
    "\n",
    "# print the peaks\n",
    "print('Peaks are: %s' % (peaks2))\n",
    "\n",
    "# visualize and compare peaks detectors\n",
    "#plt.subplot(2, 1, 1)\n",
    "#plt.plot(peaks, x[peaks], \"xr\"); plt.plot(x); plt.legend(['distance']) # ko\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.plot(peaks2, x[peaks2], \"or\"); plt.plot(x); plt.legend(['prominence']) # BEST !\n",
    "plt.subplot(2, 1, 2)\n",
    "plt.plot(peaks3, x[peaks3], \"vr\"); plt.plot(x); plt.legend(['width'])  # BEST !\n",
    "#plt.subplot(2, 1, 2)\n",
    "#plt.plot(peaks4, x[peaks4], \"or\"); plt.plot(x); plt.legend(['threshold']) # ko\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'time_series' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-93-83a52622b57a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m fig.add_trace(go.Scatter(\n\u001b[0;32m----> 4\u001b[0;31m     \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtime_series\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m     \u001b[0mmode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'lines+markers'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Original Plot'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'time_series' is not defined"
     ]
    }
   ],
   "source": [
    "# Visualize peaks with plotly\n",
    "fig = go.Figure()\n",
    "fig.add_trace(go.Scatter(\n",
    "    y=time_series,\n",
    "    mode='lines+markers',\n",
    "    name='Original Plot'\n",
    "))\n",
    "\n",
    "fig.add_trace(go.Scatter(\n",
    "    x=peaks2,\n",
    "    y=[time_series[j] for j in peaks2],\n",
    "    mode='markers',\n",
    "    marker=dict(size=8, color='red', symbol='circle'),\n",
    "    name='Detected Peaks'\n",
    "))\n",
    "\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>ahorro corriente</th>\n",
       "      <th>ahorro energia</th>\n",
       "      <th>energia solar</th>\n",
       "      <th>placas solares</th>\n",
       "      <th>energia fotovoltaica</th>\n",
       "      <th>energia solar fotovoltaica</th>\n",
       "      <th>placa energia solar</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>day</th>\n",
       "      <th>hour</th>\n",
       "      <th>geo_location</th>\n",
       "      <th>min_interest</th>\n",
       "      <th>max_interest</th>\n",
       "      <th>avg_interest</th>\n",
       "      <th>is_peak</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2021-06-01 09:00:00</td>\n",
       "      <td>4</td>\n",
       "      <td>12</td>\n",
       "      <td>75</td>\n",
       "      <td>65</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>36</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>ES</td>\n",
       "      <td>2</td>\n",
       "      <td>75</td>\n",
       "      <td>28.285714</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2021-06-01 12:00:00</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>76</td>\n",
       "      <td>75</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>16</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>ES</td>\n",
       "      <td>1</td>\n",
       "      <td>76</td>\n",
       "      <td>26.714286</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2021-06-01 15:00:00</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>59</td>\n",
       "      <td>67</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>40</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>15</td>\n",
       "      <td>ES</td>\n",
       "      <td>1</td>\n",
       "      <td>67</td>\n",
       "      <td>26.428571</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>2021-06-01 23:00:00</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "      <td>39</td>\n",
       "      <td>59</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>57</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>23</td>\n",
       "      <td>ES</td>\n",
       "      <td>2</td>\n",
       "      <td>59</td>\n",
       "      <td>25.714286</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>2021-06-02 01:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>57</td>\n",
       "      <td>43</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>100</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>100</td>\n",
       "      <td>31.000000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>2021-06-02 03:00:00</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>31</td>\n",
       "      <td>68</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>89</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>89</td>\n",
       "      <td>29.142857</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>2021-06-02 07:00:00</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>89</td>\n",
       "      <td>69</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>ES</td>\n",
       "      <td>2</td>\n",
       "      <td>89</td>\n",
       "      <td>27.142857</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>2021-06-02 16:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>66</td>\n",
       "      <td>65</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>14</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>16</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>66</td>\n",
       "      <td>23.142857</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>2021-06-03 02:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>56</td>\n",
       "      <td>74</td>\n",
       "      <td>12</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>74</td>\n",
       "      <td>23.428571</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>2021-06-03 04:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>43</td>\n",
       "      <td>73</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>42</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>73</td>\n",
       "      <td>23.428571</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>2021-06-03 08:00:00</td>\n",
       "      <td>5</td>\n",
       "      <td>14</td>\n",
       "      <td>80</td>\n",
       "      <td>69</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>31</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>ES</td>\n",
       "      <td>4</td>\n",
       "      <td>80</td>\n",
       "      <td>30.142857</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>2021-06-03 11:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>66</td>\n",
       "      <td>68</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>37</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>11</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>68</td>\n",
       "      <td>27.428571</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>2021-06-03 15:00:00</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>63</td>\n",
       "      <td>70</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>15</td>\n",
       "      <td>ES</td>\n",
       "      <td>2</td>\n",
       "      <td>70</td>\n",
       "      <td>22.571429</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>2021-06-03 19:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>44</td>\n",
       "      <td>66</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>29</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>19</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>66</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76</th>\n",
       "      <td>2021-06-04 04:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>49</td>\n",
       "      <td>66</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>39</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>66</td>\n",
       "      <td>23.857143</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79</th>\n",
       "      <td>2021-06-04 07:00:00</td>\n",
       "      <td>2</td>\n",
       "      <td>11</td>\n",
       "      <td>78</td>\n",
       "      <td>59</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>26</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>ES</td>\n",
       "      <td>2</td>\n",
       "      <td>78</td>\n",
       "      <td>26.571429</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>2021-06-04 10:00:00</td>\n",
       "      <td>1</td>\n",
       "      <td>11</td>\n",
       "      <td>53</td>\n",
       "      <td>58</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>30</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>10</td>\n",
       "      <td>ES</td>\n",
       "      <td>1</td>\n",
       "      <td>58</td>\n",
       "      <td>22.571429</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>89</th>\n",
       "      <td>2021-06-04 17:00:00</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>44</td>\n",
       "      <td>61</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>25</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>17</td>\n",
       "      <td>ES</td>\n",
       "      <td>1</td>\n",
       "      <td>61</td>\n",
       "      <td>20.571429</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93</th>\n",
       "      <td>2021-06-04 21:00:00</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>35</td>\n",
       "      <td>43</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>28</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>21</td>\n",
       "      <td>ES</td>\n",
       "      <td>1</td>\n",
       "      <td>43</td>\n",
       "      <td>17.571429</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>2021-06-05 01:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>33</td>\n",
       "      <td>73</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>73</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>73</td>\n",
       "      <td>25.571429</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102</th>\n",
       "      <td>2021-06-05 06:00:00</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>42</td>\n",
       "      <td>69</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>17</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>ES</td>\n",
       "      <td>2</td>\n",
       "      <td>69</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>2021-06-05 11:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>48</td>\n",
       "      <td>51</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>18</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>11</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>51</td>\n",
       "      <td>17.571429</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>112</th>\n",
       "      <td>2021-06-05 16:00:00</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>45</td>\n",
       "      <td>52</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>35</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>16</td>\n",
       "      <td>ES</td>\n",
       "      <td>1</td>\n",
       "      <td>52</td>\n",
       "      <td>20.857143</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>127</th>\n",
       "      <td>2021-06-06 07:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>60</td>\n",
       "      <td>79</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>13</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>79</td>\n",
       "      <td>23.714286</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>132</th>\n",
       "      <td>2021-06-06 12:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>47</td>\n",
       "      <td>52</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>12</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>52</td>\n",
       "      <td>18.142857</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136</th>\n",
       "      <td>2021-06-06 16:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>47</td>\n",
       "      <td>62</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>25</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>16</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>62</td>\n",
       "      <td>20.285714</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>144</th>\n",
       "      <td>2021-06-07 00:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>42</td>\n",
       "      <td>62</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>62</td>\n",
       "      <td>15.714286</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>2021-06-07 03:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>56</td>\n",
       "      <td>89</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>89</td>\n",
       "      <td>20.714286</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>151</th>\n",
       "      <td>2021-06-07 07:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>77</td>\n",
       "      <td>52</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>23.571429</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161</th>\n",
       "      <td>2021-06-07 17:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>65</td>\n",
       "      <td>58</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>17</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>65</td>\n",
       "      <td>21.571429</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>166</th>\n",
       "      <td>2021-06-07 22:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>43</td>\n",
       "      <td>41</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>42</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>22</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>43</td>\n",
       "      <td>19.571429</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   date  ahorro corriente  ahorro energia  energia solar  \\\n",
       "9   2021-06-01 09:00:00                 4              12             75   \n",
       "12  2021-06-01 12:00:00                 1              12             76   \n",
       "15  2021-06-01 15:00:00                 2              12             59   \n",
       "23  2021-06-01 23:00:00                 3              17             39   \n",
       "25  2021-06-02 01:00:00                 0               0             57   \n",
       "27  2021-06-02 03:00:00                10               0             31   \n",
       "31  2021-06-02 07:00:00                 2              15             89   \n",
       "40  2021-06-02 16:00:00                 0              11             66   \n",
       "50  2021-06-03 02:00:00                 0              14             56   \n",
       "52  2021-06-03 04:00:00                 0               0             43   \n",
       "56  2021-06-03 08:00:00                 5              14             80   \n",
       "59  2021-06-03 11:00:00                 0              15             66   \n",
       "63  2021-06-03 15:00:00                 4               8             63   \n",
       "67  2021-06-03 19:00:00                 0              12             44   \n",
       "76  2021-06-04 04:00:00                 0               5             49   \n",
       "79  2021-06-04 07:00:00                 2              11             78   \n",
       "82  2021-06-04 10:00:00                 1              11             53   \n",
       "89  2021-06-04 17:00:00                 1               9             44   \n",
       "93  2021-06-04 21:00:00                 1               9             35   \n",
       "97  2021-06-05 01:00:00                 0               0             33   \n",
       "102 2021-06-05 06:00:00                 2               8             42   \n",
       "107 2021-06-05 11:00:00                 0               2             48   \n",
       "112 2021-06-05 16:00:00                 1               8             45   \n",
       "127 2021-06-06 07:00:00                 0               8             60   \n",
       "132 2021-06-06 12:00:00                 0              13             47   \n",
       "136 2021-06-06 16:00:00                 0               5             47   \n",
       "144 2021-06-07 00:00:00                 0               0             42   \n",
       "147 2021-06-07 03:00:00                 0               0             56   \n",
       "151 2021-06-07 07:00:00                 0              10             77   \n",
       "161 2021-06-07 17:00:00                 0               6             65   \n",
       "166 2021-06-07 22:00:00                 0               8             43   \n",
       "\n",
       "     placas solares  energia fotovoltaica  energia solar fotovoltaica  \\\n",
       "9                65                     4                           2   \n",
       "12               75                     4                           3   \n",
       "15               67                     4                           1   \n",
       "23               59                     3                           2   \n",
       "25               43                    10                           7   \n",
       "27               68                     6                           0   \n",
       "31               69                     4                           2   \n",
       "40               65                     4                           2   \n",
       "50               74                    12                           8   \n",
       "52               73                     3                           3   \n",
       "56               69                     8                           4   \n",
       "59               68                     4                           2   \n",
       "63               70                     4                           2   \n",
       "67               66                     2                           1   \n",
       "76               66                     5                           3   \n",
       "79               59                     6                           4   \n",
       "82               58                     3                           2   \n",
       "89               61                     2                           2   \n",
       "93               43                     4                           3   \n",
       "97               73                     0                           0   \n",
       "102              69                     5                           4   \n",
       "107              51                     2                           2   \n",
       "112              52                     3                           2   \n",
       "127              79                     4                           2   \n",
       "132              52                     3                           2   \n",
       "136              62                     2                           1   \n",
       "144              62                     4                           2   \n",
       "147              89                     0                           0   \n",
       "151              52                     6                           3   \n",
       "161              58                     5                           2   \n",
       "166              41                     2                           1   \n",
       "\n",
       "     placa energia solar  year  month  day  hour geo_location  min_interest  \\\n",
       "9                     36  2021      6    1     9           ES             2   \n",
       "12                    16  2021      6    1    12           ES             1   \n",
       "15                    40  2021      6    1    15           ES             1   \n",
       "23                    57  2021      6    1    23           ES             2   \n",
       "25                   100  2021      6    2     1           ES             0   \n",
       "27                    89  2021      6    2     3           ES             0   \n",
       "31                     9  2021      6    2     7           ES             2   \n",
       "40                    14  2021      6    2    16           ES             0   \n",
       "50                     0  2021      6    3     2           ES             0   \n",
       "52                    42  2021      6    3     4           ES             0   \n",
       "56                    31  2021      6    3     8           ES             4   \n",
       "59                    37  2021      6    3    11           ES             0   \n",
       "63                     7  2021      6    3    15           ES             2   \n",
       "67                    29  2021      6    3    19           ES             0   \n",
       "76                    39  2021      6    4     4           ES             0   \n",
       "79                    26  2021      6    4     7           ES             2   \n",
       "82                    30  2021      6    4    10           ES             1   \n",
       "89                    25  2021      6    4    17           ES             1   \n",
       "93                    28  2021      6    4    21           ES             1   \n",
       "97                    73  2021      6    5     1           ES             0   \n",
       "102                   17  2021      6    5     6           ES             2   \n",
       "107                   18  2021      6    5    11           ES             0   \n",
       "112                   35  2021      6    5    16           ES             1   \n",
       "127                   13  2021      6    6     7           ES             0   \n",
       "132                   10  2021      6    6    12           ES             0   \n",
       "136                   25  2021      6    6    16           ES             0   \n",
       "144                    0  2021      6    7     0           ES             0   \n",
       "147                    0  2021      6    7     3           ES             0   \n",
       "151                   17  2021      6    7     7           ES             0   \n",
       "161                   15  2021      6    7    17           ES             0   \n",
       "166                   42  2021      6    7    22           ES             0   \n",
       "\n",
       "     max_interest  avg_interest  is_peak  \n",
       "9              75     28.285714        1  \n",
       "12             76     26.714286        1  \n",
       "15             67     26.428571        1  \n",
       "23             59     25.714286        1  \n",
       "25            100     31.000000        1  \n",
       "27             89     29.142857        1  \n",
       "31             89     27.142857        1  \n",
       "40             66     23.142857        1  \n",
       "50             74     23.428571        1  \n",
       "52             73     23.428571        1  \n",
       "56             80     30.142857        1  \n",
       "59             68     27.428571        1  \n",
       "63             70     22.571429        1  \n",
       "67             66     22.000000        1  \n",
       "76             66     23.857143        1  \n",
       "79             78     26.571429        1  \n",
       "82             58     22.571429        1  \n",
       "89             61     20.571429        1  \n",
       "93             43     17.571429        1  \n",
       "97             73     25.571429        1  \n",
       "102            69     21.000000        1  \n",
       "107            51     17.571429        1  \n",
       "112            52     20.857143        1  \n",
       "127            79     23.714286        1  \n",
       "132            52     18.142857        1  \n",
       "136            62     20.285714        1  \n",
       "144            62     15.714286        1  \n",
       "147            89     20.714286        1  \n",
       "151            77     23.571429        1  \n",
       "161            65     21.571429        1  \n",
       "166            43     19.571429        1  "
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Mark registry as a peak 1 = true or not 0 = false\n",
    "df['is_peak'] = 0\n",
    "for i in peaks2:\n",
    "    df.loc[i,['is_peak']] = 1\n",
    "\n",
    "filter = df['is_peak'] == 1 # check updates\n",
    "df[filter]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic Regression for is_peak prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>ahorro corriente</th>\n",
       "      <th>ahorro energia</th>\n",
       "      <th>energia solar</th>\n",
       "      <th>placas solares</th>\n",
       "      <th>energia fotovoltaica</th>\n",
       "      <th>energia solar fotovoltaica</th>\n",
       "      <th>placa energia solar</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>day</th>\n",
       "      <th>hour</th>\n",
       "      <th>geo_location</th>\n",
       "      <th>min_interest</th>\n",
       "      <th>max_interest</th>\n",
       "      <th>avg_interest</th>\n",
       "      <th>is_peak</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-06-01 00:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>20</td>\n",
       "      <td>37</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>37</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021-06-01 01:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>38</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>38</td>\n",
       "      <td>7.142857</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021-06-01 02:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>70</td>\n",
       "      <td>33</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>70</td>\n",
       "      <td>17.857143</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021-06-01 03:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>47</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>14.714286</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2021-06-01 04:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>54</td>\n",
       "      <td>59</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>2021</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>ES</td>\n",
       "      <td>0</td>\n",
       "      <td>59</td>\n",
       "      <td>17.285714</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 date  ahorro corriente  ahorro energia  energia solar  \\\n",
       "0 2021-06-01 00:00:00                 0              13             20   \n",
       "1 2021-06-01 01:00:00                 0               0             12   \n",
       "2 2021-06-01 02:00:00                 0              14             70   \n",
       "3 2021-06-01 03:00:00                 0               0             50   \n",
       "4 2021-06-01 04:00:00                 0               0             54   \n",
       "\n",
       "   placas solares  energia fotovoltaica  energia solar fotovoltaica  \\\n",
       "0              37                     0                           0   \n",
       "1              38                     0                           0   \n",
       "2              33                     4                           4   \n",
       "3              47                     3                           3   \n",
       "4              59                     4                           4   \n",
       "\n",
       "   placa energia solar  year  month  day  hour geo_location  min_interest  \\\n",
       "0                    0  2021      6    1     0           ES             0   \n",
       "1                    0  2021      6    1     1           ES             0   \n",
       "2                    0  2021      6    1     2           ES             0   \n",
       "3                    0  2021      6    1     3           ES             0   \n",
       "4                    0  2021      6    1     4           ES             0   \n",
       "\n",
       "   max_interest  avg_interest  is_peak  \n",
       "0            37     10.000000        0  \n",
       "1            38      7.142857        0  \n",
       "2            70     17.857143        0  \n",
       "3            50     14.714286        0  \n",
       "4            59     17.285714        0  "
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lets select some features for the modeling. Also we change the target data type to be integer, as it is a requirement by the skitlearn algorithm:\n",
    "# churn_df = df[['placas solares','max_interest', 'avg_interest','is_peak']]\n",
    "# churn is is_peak column\n",
    "df['is_peak'] = df['is_peak'].astype('int')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-1.84, -1.85, -1.74],\n",
       "       [-1.76, -1.77, -2.33],\n",
       "       [-2.19,  0.75, -0.11],\n",
       "       [-0.97, -0.82, -0.76],\n",
       "       [ 0.08, -0.11, -0.23]])"
      ]
     },
     "execution_count": 188,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lets define X, and y for our dataset:\n",
    "#X = np.asarray(df[['ahorro energia','energia solar', 'placas solares','avg_interest','max_interest','year','month','day','hour']])\n",
    "X = np.asarray(df[['placas solares','max_interest', 'avg_interest']])\n",
    "#X = np.asarray(df[['energia solar','placas solares','energia fotovoltaica','energia solar fotovoltaica','max_interest','avg_interest']])\n",
    "X[0:5]\n",
    "y = np.asarray(df['is_peak'])\n",
    "y [0:5]\n",
    "\n",
    "# Also, we normalize the dataset:\n",
    "# from sklearn import preprocessing\n",
    "X = preprocessing.StandardScaler().fit(X).transform(X)\n",
    "X[0:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train set: (100, 3) (100,)\n",
      "Test set: (68, 3) (68,)\n"
     ]
    }
   ],
   "source": [
    "# Train and test Dataset\n",
    "# from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.4, random_state=4)\n",
    "print ('Train set:', X_train.shape,  y_train.shape)\n",
    "print ('Test set:', X_test.shape,  y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,\n",
       "       0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,\n",
       "       0, 0])"
      ]
     },
     "execution_count": 190,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Train the model\n",
    "#from sklearn.linear_model import LogisticRegression\n",
    "#from sklearn.metrics import confusion_matrix\n",
    "LR = LogisticRegression(C=0.01, solver='liblinear').fit(X_train,y_train)\n",
    "LRyhat = LR.predict(X_test)\n",
    "\n",
    "# Now we can predict using our test set:\n",
    "yhat = LR.predict(X_test)\n",
    "yhat\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.53, 0.47],\n",
       "       [0.51, 0.49],\n",
       "       [0.53, 0.47],\n",
       "       [0.55, 0.45],\n",
       "       [0.55, 0.45],\n",
       "       [0.55, 0.45],\n",
       "       [0.63, 0.37],\n",
       "       [0.5 , 0.5 ],\n",
       "       [0.55, 0.45],\n",
       "       [0.64, 0.36],\n",
       "       [0.55, 0.45],\n",
       "       [0.58, 0.42],\n",
       "       [0.55, 0.45],\n",
       "       [0.61, 0.39],\n",
       "       [0.54, 0.46],\n",
       "       [0.58, 0.42],\n",
       "       [0.62, 0.38],\n",
       "       [0.59, 0.41],\n",
       "       [0.45, 0.55],\n",
       "       [0.58, 0.42],\n",
       "       [0.58, 0.42],\n",
       "       [0.51, 0.49],\n",
       "       [0.58, 0.42],\n",
       "       [0.51, 0.49],\n",
       "       [0.48, 0.52],\n",
       "       [0.56, 0.44],\n",
       "       [0.52, 0.48],\n",
       "       [0.57, 0.43],\n",
       "       [0.6 , 0.4 ],\n",
       "       [0.54, 0.46],\n",
       "       [0.59, 0.41],\n",
       "       [0.43, 0.57],\n",
       "       [0.54, 0.46],\n",
       "       [0.65, 0.35],\n",
       "       [0.52, 0.48],\n",
       "       [0.54, 0.46],\n",
       "       [0.47, 0.53],\n",
       "       [0.53, 0.47],\n",
       "       [0.51, 0.49],\n",
       "       [0.54, 0.46],\n",
       "       [0.65, 0.35],\n",
       "       [0.61, 0.39],\n",
       "       [0.56, 0.44],\n",
       "       [0.52, 0.48],\n",
       "       [0.56, 0.44],\n",
       "       [0.6 , 0.4 ],\n",
       "       [0.52, 0.48],\n",
       "       [0.51, 0.49],\n",
       "       [0.54, 0.46],\n",
       "       [0.6 , 0.4 ],\n",
       "       [0.63, 0.37],\n",
       "       [0.6 , 0.4 ],\n",
       "       [0.68, 0.32],\n",
       "       [0.58, 0.42],\n",
       "       [0.5 , 0.5 ],\n",
       "       [0.59, 0.41],\n",
       "       [0.68, 0.32],\n",
       "       [0.53, 0.47],\n",
       "       [0.47, 0.53],\n",
       "       [0.52, 0.48],\n",
       "       [0.58, 0.42],\n",
       "       [0.5 , 0.5 ],\n",
       "       [0.6 , 0.4 ],\n",
       "       [0.48, 0.52],\n",
       "       [0.52, 0.48],\n",
       "       [0.55, 0.45],\n",
       "       [0.5 , 0.5 ],\n",
       "       [0.58, 0.42]])"
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#predict_proba returns estimates for all classes, ordered by the label of classes. So, the first column is the probability of class 0, P(Y=0|X), and second column is probability of class 1, P(Y=1|X):\n",
    "yhat_prob = LR.predict_proba(X_test)\n",
    "yhat_prob"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9206349206349206"
      ]
     },
     "execution_count": 192,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Evaluation\n",
    "# Jaccard\n",
    "# from sklearn.metrics import jaccard_score\n",
    "jaccard_score(y_test, yhat,pos_label=0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 5  3]\n",
      " [ 2 58]]\n"
     ]
    }
   ],
   "source": [
    "# Evaluation\n",
    "# Confusion Matrix\n",
    "#from sklearn.metrics import classification_report, confusion_matrix\n",
    "import itertools\n",
    "def plot_confusion_matrix(cm, classes,\n",
    "                          normalize=False,\n",
    "                          title='Confusion matrix',\n",
    "                          cmap=plt.cm.Blues):\n",
    "    \"\"\"\n",
    "    This function prints and plots the confusion matrix.\n",
    "    Normalization can be applied by setting `normalize=True`.\n",
    "    \"\"\"\n",
    "    if normalize:\n",
    "        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
    "        print(\"Normalized confusion matrix\")\n",
    "    else:\n",
    "        print('Confusion matrix, without normalization')\n",
    "\n",
    "    print(cm)\n",
    "\n",
    "    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n",
    "    plt.title(title)\n",
    "    plt.colorbar()\n",
    "    tick_marks = np.arange(len(classes))\n",
    "    plt.xticks(tick_marks, classes, rotation=45)\n",
    "    plt.yticks(tick_marks, classes)\n",
    "\n",
    "    fmt = '.2f' if normalize else 'd'\n",
    "    thresh = cm.max() / 2.\n",
    "    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n",
    "        plt.text(j, i, format(cm[i, j], fmt),\n",
    "                 horizontalalignment=\"center\",\n",
    "                 color=\"white\" if cm[i, j] > thresh else \"black\")\n",
    "\n",
    "    plt.tight_layout()\n",
    "    plt.ylabel('True label')\n",
    "    plt.xlabel('Predicted label')\n",
    "print(confusion_matrix(y_test, yhat, labels=[1,0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "[[ 5  3]\n",
      " [ 2 58]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compute confusion matrix\n",
    "cnf_matrix = confusion_matrix(y_test, yhat, labels=[1,0])\n",
    "np.set_printoptions(precision=2)\n",
    "\n",
    "\n",
    "# Plot non-normalized confusion matrix\n",
    "plt.figure()\n",
    "plot_confusion_matrix(cnf_matrix, classes=['is_peak=1','is_peak=0'],normalize= False,  title='Confusion matrix')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [],
   "source": [
    "# With: ['ahorro energia','energia solar', 'placas solares','avg_interest','max_interest','year','month','day','hour']\n",
    "# Results: 2 of 6 is_peak=1 predicted well, 57 of 62 is_peak=0 predicted well --> 0,31% accur\n",
    "\n",
    "# With: ['placas solares','max_interest', 'avg_interest']\n",
    "# Results: 2 of 6 is_peak=1 predicted well, 59 of 62 is_peak=0 predicted well --> 0,40% accur\n",
    "\n",
    "# With: ['placas solares','max_interest', 'avg_interest','year','month','day','hour']\n",
    "# Results: 2 of 6 is_peak=1 predicted well, 58 of 62 is_peak=0 predicted well --> 0,33% accur\n",
    "\n",
    "# With: ['energia solar','placas solares','energia fotovoltaica','energia solar fotovoltaica','max_interest','avg_interest']\n",
    "# Results: 6 of 8 is_peak=1 predicted well, 51 of 60 is_peak=0 predicted well -->0,40 accur prec 1, 0,84 avrg\n",
    "\n",
    "# With ['placas solares', 'max_interest', 'avg_interest']\n",
    "# Results: 5 of 8 is_peak=1 predicted well, 58 of 60 is_peak_=0 predicted well --> 0,67% accur precision in 1 (0,93 avg)\n",
    "\n",
    "# With ['placas solares','energia solar', 'max_interest', 'avg_interest']\n",
    "# Results: 4 of 6 is_peak=1 predicted well, 42 of 46 is_peak_=0 predicted well --> 0,62% accur precision in 1 (0,90 avg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.97      0.96        60\n",
      "           1       0.71      0.62      0.67         8\n",
      "\n",
      "    accuracy                           0.93        68\n",
      "   macro avg       0.83      0.80      0.81        68\n",
      "weighted avg       0.92      0.93      0.92        68\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print (classification_report(y_test, yhat))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5859908537562785"
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Log loss\n",
    "# from sklearn.metrics import log_loss\n",
    "log_loss(y_test, yhat_prob)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO --> split N calls of historical interest month by month to get the hourly overall detail and merge into a single csv file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO --> split N calls of interest_by_region and merge them all by N historical_interest for each region in the same timeframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
